% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bf_type.R
\name{bf_type}
\alias{bf_type}
\title{Build a bit flag by checking for the type}
\usage{
bf_type(
  x,
  test,
  type = NULL,
  coerce = FALSE,
  pos = NULL,
  na.val = NULL,
  description = NULL,
  registry = NULL
)
}
\arguments{
\item{x}{\code{\link[=data.frame]{data.frame(1)}}\cr the table that contains
\code{test}.}

\item{test}{\code{\link[=character]{character(1)}}\cr the column in \code{x} for which
the type is identified.}

\item{type}{\code{\link[=character]{character(1)}}\cr the for which to check, possible
values are \code{"integer"}, \code{"numeric"}, \code{"character"} or
\code{"logical"}.}

\item{coerce}{\code{\link[=logical]{logical(1)}}\cr whether or not to carry out a more
aggressive test, where the values are coerced to the target type and those
that end up not having NA-values are reported as \code{TRUE}.}

\item{pos}{\code{\link[=integer]{integerish(.)}}\cr the position(s) in the bitfield that
should be set.}

\item{na.val}{\code{\link[=character]{character(1)}}\cr optional value that should be
used to substitute NA values in the input data.}

\item{description}{\code{\link[=character]{character(.)}}\cr optional description that
should be used instead of the default function-specific description. This
description is used in the registry legend, so it should have as many
entries as there will be entries per the respective flag in the legend (two
for a binary flag, as many as there are cases for a cases flag and one for
count or numeric flags).}

\item{registry}{\code{\link[=registry]{registry(1)}}\cr a bitfield registry that has
been defined with \code{\link{bf_registry}}; if it's undefined, an empty
registry will be defined on-the-fly.}
}
\value{
an object of class 'registry' with the additional flag defined here.
}
\description{
Build a bit flag by checking for the type
}
\details{
When coercing values to \itemize{ \item integer, they are typically
truncated to the non-decimal part of the value. This function compares the
truncated value to the original value and thus returns \code{TRUE} only
when the original value didn't have a decimals part or when that part was
\code{.0}. It, moreover, returns \code{FALSE} for \code{NA} and
\code{NaN}-values, and also for the special case \code{NA_integer_}, as
this is not supported in many other programs that might provide data for or
use them from this function. \item numeric, this function returns
\code{TRUE} for any value that can sensibly be interpreted as numeric, such
as \code{1L} (an integer) or \code{"1"} (a character), but not \code{"1L"}
(a character of an integer) or \code{"one"} (another character). It returns
\code{FALSE} for \code{NA} and \code{NaN}-values, and also for the special
case \code{NA_real_}, as this is not supported in many other programs that
might provide data for or use them from this function. \item character,
this function returns \code{FALSE} for Inf and \code{NA}, and also for the
special cases of \code{NA_character_}, as this is not supported in many
other programs that might provide data for or use them from this function.
\item logical, this function returns \code{TRUE} only for the integer(!)
values \code{0L} and \code{1L}. For all other values, including \code{NA},
this function returns \code{FALSE}. }
}
\examples{
bf_type(x = tbl_bityield, test = "y", type = "character", coerce = TRUE)
}
